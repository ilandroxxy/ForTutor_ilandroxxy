# Тип 14 № 10479
'''
# Значение арифметического выражения: 9 в степени (2016) плюс З в степени (2015) минус 9 — записали в
# системе счисления с основанием 3. Сколько цифр «2» содержится в этой записи?


x = 9 ** 2016 + 3 ** 2015 - 9  # Значение арифметического выражения: 9 в степени (2016) плюс З в степени (2015) минус 9

M = []
while x > 0:
    M.append(x % 3)  # системе счисления с основанием 3
    x //= 3
M.reverse()

print(M.count(2)) # Сколько цифр «2» содержится в этой записи?

'''

# Тип 14 № 4559
'''
# Запись десятичного числа в системах счисления с основаниями 3 и 5 в обоих
# случаях имеет последней цифрой 0. Какое минимальное натуральное десятичное число удовлетворяет этому требованию?

for x in range(1,1000):
    if x % 3 == 0 and x % 5 == 0:
        print(x)
'''
# Ответ 15


# Тип 14 № 2332
'''
# Запись числа 180 в системе счисления с основанием N содержит 3 цифры и оканчивается на 0.
# Перечислите через запятую в порядке возрастания все возможные основания системы счисления.


for n in range(2, 100):
    x = 180
    M = []
    while x > 0:
        M.append(x % n)
        x //= n
    M.reverse()

    if len(M) == 3 and M[-1] == 0:
        print(n)
'''


# Тип 14 № 9200
'''
# Решите уравнение:
# 101_n + 13_10 = 101_(n+1)
#    x1 + 13    ==  x2
for n in range(2, 100):
    M1 = [1, 0, 1]
    M2 = [1, 0, 1]

    x1 = 0
    for i in range(0, len(M1)):
        x1 += M1[i] * n ** i

    x2 = 0
    for i in range(0, len(M2)):
        x2 += M2[i] * (n+1) ** i

    if x1 + 13 == x2:
        print(n)
'''
# Ответ 6


# Тип 5 № 25836
'''
# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число следующим образом.
# 1) Строится двоичная запись числа N.
# 2) К этой записи дописываются справа ещё два разряда по следующему правилу: если N чётное, в конец числа (справа) дописываются два нуля,
# в противном случае справа дописываются две единицы.

# Укажите максимальное число N, для которого результат работы алгоритма будет меньше 134. В ответе это число запишите в десятичной системе счисления.

for n in range(1, 10000):
    temp = n

    N = []
    while n > 0:
        N.append(n % 2)  # 1) Строится двоичная запись числа N.
        n //= 2
    N.reverse()

    if temp % 2 == 0:  # если N чётное, в конец числа (справа) дописываются два нуля
        N.append(0)
        N.append(0)
    else:        # в противном случае справа дописываются две единицы.
        N.append(1)
        N.append(1)

    R = 0
    N.reverse()
    for i in range(0, len(N)):  # вернулись к 10-ной системе счисления
        R += N[i] * 2 ** i


    if R < 134:
        print(temp)   # Укажите максимальное число N, для которого результат работы алгоритма будет меньше 134
'''
# Ответ 32




# Тип 16 № 5618
# https://inf-ege.sdamgia.ru/problem?id=5618
'''
# Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями:
#
# F(n) =  2 при n ≤ 2;
# F(n) = 2 * F(n − 1) + F(n − 2) при n > 2.
#
# Чему равно значение функции F(5)? В ответе запишите только натуральное число.

def F(n):  # n = 5
    if n <= 2:
        return 2
    if n > 2:
        return 2 * F(n - 1) + F(n - 2)

print(F(5))
'''
# Ответ 34



# Тип 22 № 5215
# https://inf-ege.sdamgia.ru/problem?id=5215
'''
# Ниже на пяти языках программирования записан алгоритм.
# Получив на вход число N, этот алгоритм печатает число q.
# Укажите наименьшее из таких чисел N, при вводе которых алгоритм напечатает 17.

for i in range(1, 10000):
    q = 0
    n = i
    for i in range(1, n):
        if n % i == 0:
            q = i
    if q == 17:
        print(i, q)
'''
# Ответ 33



# Тип 16 № 39245
# https://inf-ege.sdamgia.ru/problem?id=39245
'''
# Алгоритм вычисления значения функции F(n), где n — целое неотрицательное число, задан следующими соотношениями:
#
# F(0) = 0;
# F(n) = F(n / 2), если n > 0 и при этом чётно;
# F(n) = 1 + F(n − 1), если n нечётно.
#
# Сколько существует таких чисел n, что 1 ≤ n ≤ 900 и F(n)=9?



def F(n):
    if n == 0:
        return 0
    if n > 0 and n % 2 == 0:
        return F(n / 2)
    if n % 2 != 0:
        return 1 + F(n - 1)

count = 0
for i in range(1, 900+1):
    if F(i) == 9:
        count += 1
print(count)
'''
# Ответ 3


# Тип 17 № 37345
# # https://inf-ege.sdamgia.ru/problem?id=37345
'''
# В файле содержится последовательность из 10000 целых положительных чисел. Каждое число не превышает 10000.
# Определите и запишите в ответе сначала количество пар элементов последовательности, для которых произведение
# элементов делится без остатка на 62, затем максимальную из сумм элементов таких пар.
# В данной задаче под парой подразумевается два различных элемента последовательности. Порядок элементов в паре не важен.

f = open("17.txt", "r") # "r" - читаем из файла

M = [int(i) for i in f]
print(M)

count = 0
maxi = 0
for i in range(0, len(M)):
    for j in range(i+1, len(M)):
        if (M[i] * M[j]) % 62 == 0:
            count += 1
            if maxi < M[i] + M[j]:
                maxi = M[i] + M[j]

print(count, maxi)
'''
# Ответ 2284645 19920



# Тип 17 № 39246
# https://inf-ege.sdamgia.ru/problem?id=39246
'''
# Файл содержит последовательность неотрицательных целых чисел, не превышающих 10 000.
# Назовём парой два идущих подряд элемента последовательности.
# Определите количество пар, в которых хотя бы один из двух элементов делится на 5, а их сумма делится на 7.
# В ответе запишите два числа: сначала количество найденных пар, а затем — максимальную сумму элементов таких пар.

f = open("17.txt", "r") # "r" - читаем из файла

M = [int(i) for i in f]
print(M)

count = 0
maxi = 0
for i in range(0, len(M)-1):
    if M[i] % 5 == 0 or M[i+1] % 5 == 0:
        if (M[i] + M[i+1]) % 7 == 0:
            count += 1
            if maxi < M[i] + M[i+1]:
                maxi = M[i] + M[i+1]

print(count, maxi)
'''
# Ответ 308 18893


# Тип 24 № 27690
# https://inf-ege.sdamgia.ru/problem?id=27690
'''
# Текстовый файл состоит не более чем из 10**6 символов A, B и C.
# Определите максимальное количество идущих подряд символов, среди которых каждые два соседних различны.
# Для выполнения этого задания следует написать программу.
# Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.


f = open("zadanie24_1.txt", "r")
s = f.readline()

count = 1
maxi = 0

for i in range(0, len(s)-1):
    if s[i] != s[i+1]:
        count += 1
        if maxi < count:
            maxi = count
    else:
        count = 1
print(maxi)
'''
# Ответ 42


# Тип 24 № 33526
# https://inf-ege.sdamgia.ru/problem?id=33526
'''
# Текстовый файл содержит только заглавные буквы латинского алфавита (ABC…Z).
# Определите символ, который чаще всего встречается в файле между двумя одинаковыми символами.
# Для выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.

f = open("24.txt", "r")
s = f.readline()


M = []
for i in range(0, len(s)-2):
    if s[i] == s[i+2]:
       M.append(s[i+1])

maxi = 0
Letter = 0
Alphabet = "QWERTYUIOPASDFGHJKLZXCVBNM"
for x in Alphabet:
    if maxi < M.count(x):
        maxi = M.count(x)
        Letter = x
print(Letter)
'''
# Ответ D



# Тип 11 № 11269
# https://inf-ege.sdamgia.ru/problem?id=11269
'''
# При регистрации в компьютерной системе каждому пользователю выдаётся пароль, состоящий из 15 символов и содержащий только
# символы из 12-символьного набора: А, В, C, D, Е, F, G, H, K, L, M, N. В базе данных для хранения сведений о каждом пользователе
# отведено одинаковое и минимально возможное целое число байт. При этом используют посимвольное кодирование паролей, все символы
# кодируют одинаковым и минимально возможным количеством бит. Кроме собственно пароля, для каждого пользователя в системе хранятся
# дополнительные сведения, для чего выделено целое число байт; это число одно и то же для всех пользователей.
# Для хранения сведений о 20 пользователях потребовалось 400 байт.
# Сколько байт выделено для хранения дополнительных сведений об одном пользователе? В ответе запишите только целое число— количество байт.


# 1) 12 -> 16 = 2**4 -> 4 бита на 1 символ
# 2) 15 * 4 = 60 бит на пароль (для 1 пользователя)

# 1 байт = 8 бит округляем вверх! (чтобы не потерять информацию)
# 60 % 8 != 0

# 3) 64 // 8 = 8 байт на пароль (для 1 пользователя)
# 4) 20 * 8 = 160 байт
# 5) 400 - 160 = 240 байт дополнительные сведения о 20 пользователях
# 6) 240 // 20 = 12 байт дополнительные сведения (для 1 пользователя)
'''
# Ответ 12